Option Explicit

Function last_row(ws As Worksheet) As Integer
    last_row = ws.Cells(rows.count, 1).End(xlUP).row
End Function

Function last_col(ws As Worksheet) As Integer
    last_col = ws.Cells(1, columns.count).End(xltoleft).Column
End Function

Function get_col(ws As Worksheet, field_name As String) As Long
    get_col = ws.Range("1:1").Find(field_name, LookIn:=xlValues, Lookat:=xlWhole).Column
End Function

Function last_row_any(ws as Worksheet) as Integer
    'returns integer of last row, where last row is last populated cell of ANY column populated on the first row
    dim i as integer
    dim r as integer
    
    last_row_any = 1
    for i = 1 to last_col(ws)
        r = ws.Cells(rows.count, i).End(xlUP).row
        if r > last_row_any then
            last_row_any = r
        end if
    next i
    
End Function

Function pop_string(ByRef s as String, ByVal deli as String) as String
    'pops first element in string s, where elementeds are delimited by deli argument
    'TEST LATER WHEN YOU CAN
    dim i as integer: i = instr(1, s, deli)
    if i > 0 then:
        pop_string = left(s, len(s) - i)
        s = right(s, len(s) - i)
    else
        pop_string = s
        s = ""
    End if
End function


'ACCESS STUFF

'References: Microsoft ActiveX Data Objects 6.1 Library
Sub export_range_to_access(ws As Worksheet, r As Range, AccPath As String, AccTable As String)
    Dim cn As ADODB.Connection: Set cn = New ADODB.Connection
    Dim rs As ADODB.Recordset
    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0; " & _
    "Data Source=" & AccPath & ";"
    
    Dim i As Long
    Dim j As Long
    
    Set rs = New ADODB.Recordset
    rs.Open AccTable, cn, adOpenDynamic, adLockOptimistic ', 'adCmdTable
    
    For i = 1 To r.Rows.Count
        rs.AddNew
        For j = 1 To rs.fields.Count - 1
            rs.fields(j) = ws.Cells(i, GetCol(ws, rs.fields(j).name))
        Next j
        rs.Update
    Next i
    

    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing
End Sub
